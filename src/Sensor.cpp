/*****************************************************************************
* Model: sensor.qm
* File:  ./src/Sensor.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::src::Sensor.cpp} ....................................................*/
/*****************************************************************************
* Model: sensor.qm
* File:  ./SensorV2.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::SensorV2.cpp} .......................................................*/
#include "SensorV2_API.h"        // Hardware interface
#include "qpn.h"        // QP-nano framework
#include <util/delay.h>

Q_DEFINE_THIS_MODULE("sensor")

#ifdef __AVR_ATtiny24A__
#include "BSPs/ATTiny24a_bsp.h"
#endif


// define to println() many information
#define TRACE 1

const uint8_t TEMP_SAMPLE_COUNT = 10;


//============================================================================
enum SensorSignals {
    SEND_DATA_SIG = Q_USER_SIG,
    EMISSION_FINISHED_SIG,
    SLEEP_SIG,
    WAKEUP_SIG,

};


#if ((QP_VERSION < 591) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 5.9.1 or higher required
#endif

/*${AOs::Sensor} ...........................................................*/
typedef struct Sensor {
/* protected: */
    QActive super;
} Sensor;

/* protected: */
static QState Sensor_initial(Sensor * const me);
static QState Sensor_Active(Sensor * const me);
static QState Sensor_TempSensing(Sensor * const me);
static QState Sensor_Emitting(Sensor * const me);
static QState Sensor_Sleeping(Sensor * const me);

/*${AOs::Sensor} ...........................................................*/
/*${AOs::Sensor::SM} .......................................................*/
static QState Sensor_initial(Sensor * const me) {
    /* ${AOs::Sensor::SM::initial} */
    return Q_TRAN(&Sensor_Sleeping);
}
/*${AOs::Sensor::SM::Active} ...............................................*/
static QState Sensor_Active(Sensor * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Sensor::SM::Active} */
        case Q_ENTRY_SIG: {
            #ifdef TRACE
              Serial.println("Enter Active");
            #endif

            BSP.ActivatePeripherals();


            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Active} */
        case Q_EXIT_SIG: {
            #ifdef TRACE
                Serial.println("Exit Active");
            #endif
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Active::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Sensor_TempSensing);
            break;
        }
        /* ${AOs::Sensor::SM::Active::SLEEP} */
        case SLEEP_SIG: {
            status_ = Q_TRAN(&Sensor_Sleeping);
            break;
        }
        /* ${AOs::Sensor::SM::Active::SEND_DATA} */
        case SEND_DATA_SIG: {
            status_ = Q_TRAN(&Sensor_Emitting);
            break;
        }
        /* ${AOs::Sensor::SM::Active::EMISSION_FINISHED} */
        case EMISSION_FINISHED_SIG: {
            QACTIVE_POST(&me->super, SLEEP_SIG, me->super.prio);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::Sensor::SM::Active::TempSensing} ..................................*/
static QState Sensor_TempSensing(Sensor * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Sensor::SM::Active::TempSensing} */
        case Q_ENTRY_SIG: {
            #ifdef TRACE
              Serial.println(F("Enter TempSensing"));
            #endif

            BSP.SenseTemp();
            BSP.SendData433();

            QACTIVE_POST(&me->super, SEND_DATA_SIG, me->super.prio);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Active::TempSensing} */
        case Q_EXIT_SIG: {
            #ifdef TRACE
                Serial.println(F("Exit TempSensing"));
            #endif

            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Sensor_Active);
            break;
        }
    }
    return status_;
}
/*${AOs::Sensor::SM::Active::Emitting} .....................................*/
static QState Sensor_Emitting(Sensor * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Sensor::SM::Active::Emitting} */
        case Q_ENTRY_SIG: {
            #ifdef TRACE
                Serial.println(F("Enter Emitting"));
            #endif

            BSP.SendData433();

            QACTIVE_POST(&me->super, EMISSION_FINISHED_SIG, me->super.prio);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Active::Emitting} */
        case Q_EXIT_SIG: {
            // not needed in transmit mode
            // QACTIVE_POST(AO_Timer, QP_CLOCK, AO_Timer.prio);

            #ifdef TRACE
                Serial.println(F("Exit Emitting"));
            #endif
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&Sensor_Active);
            break;
        }
    }
    return status_;
}
/*${AOs::Sensor::SM::Sleeping} .............................................*/
static QState Sensor_Sleeping(Sensor * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Sensor::SM::Sleeping} */
        case Q_ENTRY_SIG: {
            #ifdef TRACE
                Serial.println("Enter Sleeping");
            #endif

            BSP.DeactivatePeripherals();

            QActive_armX(&me->super, 0U, BSP.TICKS_PER_SEC*5U, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Sleeping} */
        case Q_EXIT_SIG: {
            #ifdef TRACE
                Serial.println("Exit Sleeping");
            #endif
            QActive_disarmX(&me->super, 0U);

            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Sensor::SM::Sleeping::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Sensor_Active);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}


Sensor AO_Sensor;

// QF_active[] array defines all active object control blocks ----------------
static QEvt l_sensorQSto[5]; // Event queue storage for Sensor

QActiveCB const Q_ROM QF_active[] = {
  { (QActive *)0,           (QEvt *)0,        0U                  },
  { (QActive *)&AO_Sensor,  l_sensorQSto,     Q_DIM(l_sensorQSto) }
};


//............................................................................
//
int main() {

    BSP.Setup();

    BSP.PrintInfo();

    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));
    QActive_ctor(&AO_Sensor.super, Q_STATE_CAST(&Sensor_initial));

    while(true)
    {
        QF_run(); // run the QP-nano application
    }
    return 0;
}

//============================================================================

// QF callbacks...
void QF_onStartup(void) {

#ifdef TRACE
    Serial.println(F("QF_onStartup"));
#endif

    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U << WGM21) | (0U << WGM20);
    TCCR2B = (1U << CS22 ) | (1U << CS21) | (1U << CS20); // 1/2^10
    ASSR  &= ~(1U << AS2);
    TIMSK2 = (1U << OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP.TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED

#ifdef TRACE
    //Serial.println(F("QV_onIdle"));
#endif

    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}

//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {

#ifdef TRACE
    // implement the error-handling policy for your application!!!
    Serial.print(F("Assertion raised in '"));
    Serial.print(file);
    Serial.print(F("' at line"));
    Serial.print(line);
#endif
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

